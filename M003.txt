              Machine Code for the Oric Atmos (Part 13)   Peter N. Bragg                                                    	        -------------------------------                                   

The Story so far                                                                ---------------- We have looked at the basic requirements for machine code      programming on the Oric and now have a small table (subset) of sixteen useful   instructions. The last issue used a program of just two short routines to set   the keyboard so that it could be made command three simple functions.                                                                                           As the program was intended to concentrate on the keyboard operation, we        "borrowed" three of the Oric's own routines (ZAP, SHOOT and EXPLODE) to aid the demonstration.                                                                                                                                                  The listing shown on the next page is the same program, with just one change,   it has been extended to include Oric's PING routine. If you compare last months listing with this one, you will also see that the description is in a slightly  more compact form in this version. So now lets have a look at it.                                                                                               The program consists of two routines. This makes life easier, because each      routine can be dealt with seperately. The first routine gets an input from the  keyboard, the second routine tests that input and calls up any action that may  be requested.                                                                                                                                                   

"Fetch Item from Keyboard" Routine                                              ---------------------------------- This routine waits for a key to be pressed.  Each key has it's own specific hex code. After a key is pressed, its code is    tested, to see if it is one of the four command keys requiring action. Once     that has been dealt with, the operation loops back again for another key press.                                                                                 We have dealt with the procedure for reading the keyboard in Part 11 of the     series. However, to recap briefly, the instructions 1010 and 1013 use another   of the Oric's own routines (GTORKB at EB78) to make the program stop and wait   until a key has been pressed. Once this has been done, a copy of the key (code) is saved in location 1001 and we can then go on to test that key code.                                                                                          As we have just said, this routine is a loop and as it is the start of our      program, we obviously need a means to escape from the loop, otherwise we would  have no effective exit from the program, apart from the RESET button.                                                                                           In this case the exit is provided by the two instructions 1018 and 101A, which  provide the only access to the "Exit" at instruction 1022. It is usually much   easier, if you provide the means to exit from the program, immediately after    getting that particular command from the keyboard and before you get involved   with anything else. Now we have dealt with the input from the keyboard, let us  go on to see how it is tested and used.                                                                                                                         

"Control Select" Routine                                                        ------------------------ There has been a slight change of name here. The       routine in effect, selects the controls for our program. Let's ignore the first instruction at this stage. If you look at the main part of the routine, you     should be able to see that it actually consists of four small subroutines, one  for each of the four keys we are using. The four subroutines are nearly         identical to each other, the only real differences are the actual key tested    and the operation called up for it by the "JSR" instruction.                                                                                                    Lets look at the first key code test operation in instructions 1030 to 1037.    The CMP instruction at 1030 tests the Accumulator for the code produced by      pressing Key "Z". The result of that test sets or clears the "Zero Flag" which  in turn controls the operation of the BNE (Branch) instruction atf the Accumulator does contain the correct                                     code (5A for Key "Z"), the "Flag" is set to "1" and as a result the BNE instruction is disabled. Any other code tested, makes the BNE active instead.                                                                                                                                             If the BNE instruction is active, it will pass the operation on to the next test at 1038, which is for the key "S" (SHOOT).                                                                     However if the BNE is disabled (because key "Z" was pressed), the next instruction at 1034 will be used to produce the required "ZAP" effect and this will be followed by a return to the Keyboard Routine for another key input. The "RTS" at 1037 provides for that return to the keyboard input, via instruction 101F.                                                                                                                                               By the way, note that up to now, all the RTS instructions we have used, returned us to Basic. However, in this case, the "Control Select" routine was not called from Basic, but from instruction 101C in the "Keyboard" routine. As a result of this, we are now returned to the instruction 101F in that routine. That is the way the JSR and RTS instructions operate. The function of an RTS instruction is to return the program operation to the place that the current routine was called from.                                                                                                                                        Now if you look at the rest of the routine, you will see that it consists of three more sets of the same mini-routine we see in instructions 1030 to 1037. Each set of four instructions, tests for it's own specific key and calls up it's own particular operation if that key is found. Each CMP/BNE pair in effect passes the key code on from one test to the next, until it is either identified and used or it reaches the end of the routine, where it is discarded.                                                                                                                             Note that the last BNE instruction in the routine must be shortened by setting it to D0 03 so that it goes to the last RTS. This ensures that if the key is not recognised, the routine will go back and get another key input. All the other BNE instructions areset to D0 04 to reach the next test in line.                                                  Finally we can look at the very first instruction at 102D. This is used just to                                       make sure that the Accumulator will always have a copy of the key code input at the start of the Control Select routine, even if the Accumulator has been overwritten.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        

So what's it all for ?                                                          ---------------------- This is a useful program, because it can be used to      start up and control any software. Most software needs something to do that job.Setting up for other software is just a matter of changing the key tested and   the action which that key calls up.                                                                                                                             Changing any key in the Control Select routine is a doddle. For example, you    might prefer "B" for BANG instead of "S" for SHOOT. The code for "B" is 42, so  change the CMP operand in location 1039 to 42 and key "B" will call the shots.  In just the same way, you can change the action. As a simple example you could  try out some of the other Oric routines or just make all four keys produce PING by changing all the "JSR" addresses to FA9F. Later, we can use the Control      Select routine to control our own software.                                                                                                                     Four keys for commands may not seem much. However it is easy to produce a       longer version of the Control Select routine. This is how it is done.                                                                                           I write a short a short version like the above and copy it again and again      through memory to produce a routine for as many keys as I need. All the key     tests are set to one code (one that is rarely if ever used) and each of these   are made to call up a single harmless operation. In effect, this produces a     ready made set of "blanks", for as many keys as you like.                                                                                                       Writing a routine like this takes all of five minutes. A key code of "00" and a call to PING, would be OK for all of the "blank" key tests. One important point.The last BNE instruction should be set to D0 03 so it will access the last RTS  instruction, all the rest are set to D0 04 for the next key test in line. Once  this has been done, it can be saved and then used when writing new software.                                                                                    As each operation is written it can be fitted into one of the Control Select    routine "blanks", by putting it's address into the "JSR" instruction and then   linking it together with a suitable key code. This is the way to build up to a  large piece of useful software, by doing it one piece at a time in easy stages.                                                                                 

One for the Critics                                                             ------------------- The experts will tell you how this routine could be more    efficent, but is it really worth saving a few millionths of a second and a few  bytes, if the program becomes more difficult to write and understand.           My own feeling is that machine code is very fast and takes little space when    compared to other languages. If you can make your programming a lot easier by   adding an extra instruction or a few bytes, here and there, it is well worth it.                                                                                A good example of this is instruction 102D. Control Select can work without     this instruction. However, when writing software, you may well add other        routines between fetching a key and actually testing for it. Those later        additions might cause problems by changing the Accumulator contents before      "Control Select" is used. Instruction 102D will insure against this problem.                                                                                    Likewise the gap (1023 - 102C) between the two routines will allow you some     room to extend the "Fetch Item from Keyboard" routine if you need to later.                                                                                     As we progress, you will find that there are a lot of things we can do to make  programming easier. Even professional programmers rarely get software working   first time (some never, ever !!). A very clever and compact piece software with bugs in it, is a sure way of boosting the sales of hair restorer and aspirin.   It is best to get the software working first, then try the clever stuff later.                                                                                  Thats how to start up.........next time, how to change the IBM's radio valves !!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

Oric - Demo        Keyboard Control          5 Feb 92                           -----------        ----------------          --------                           [ CALL#1010 ]------------[ FETCH ITEM FROM KEYBOARD ]                                                                                                           

1001:(  )        ......    Storage for Key input.
                                                                                                                                    	   ---start---    ---Fetch a Key---                                       1010:20 78 EB : JSR EB78 : Read Keyboard                                        1013:10 FB    : BPL 1010 : until key pressed. 
                                                                                                                  1015:8D 01 10 : STA 1001 : Save Key press input.
                                                                                                                                        	                  ---Continue or Finish ?---                              1018:C9 1B    : CMP"ESC" : Was "ESC" key pressed ?                              101A:F0 06    : BEQ 1022 : If "Yes"  Finish                                                                				   If "No" then...                                                              				---Continue---                                          101C:20 2D 10 : JSR 102D : Test and use input then                              101F:4C 10 10 : JMP 1010 : back to read keyboard.                                                                                                                                       

	                  ---Finish---                                            1022:60       : RTS      : Exit back to Basic.                                            	    ---end--- 
                                                                                                                                                                                                                            [ JSR 102D ]-------------[ CONTROL SELECT ]----------                                                                                                                   

	  ----start----                                                           102D:AD 01 10 : LDA 1001 : Fetch key input for test.                                                                                                                                    

				---Test for "Zap" key---                                1030:C9 5A    : CMP "Z"  : Key "Z" pressed ?                                    1032:D0 04    : BNE 1038 : If "No" skip to next test.                                                      				   If "Yes" then                                        1034:20 E1 FA : JSR FAE1 :  use Oric's "Zap" routine.                           1037:60       : RTS      : Return to key input again.                                                                                                                                   

				---Test for "Shoot" key---                              1038:C9 53    : CMP "S"  : Key "S" pressed ?                                    103A:D0 04    : BNE 1040 : If "No" skip to next test.                                                      				   If "Yes" then                                        103C:20 B5 FA : JSR FAB5 :  use Oric's "Shoot".                                 103F:60       : RTS      : Return to key input again.                                                                                                                                   

				---Test for "Explode" key---                            1040:C9 45    : CMP "E"  : Key "E" pressed ?                                    1042:D0 04    : BNE 1047 : If "No" skip to next test.                                                      				   If "Yes" then                                        1044:20 CB FA : JSR FACB :  use Oric's "Explode".                               1047:60       : RTS      : Return to key input again.                                                                                                                                   

				---Test for "Ping" key---                               1048:C9 50    : CMP "P"  : Key "P" pressed ?                                    104A:D0 03    : BNE 1047 : If "No" Return via "RTS".                                                       				   If "Yes" then                                        104C:20 9F FA : JSR FA9F :  use Oric's "Ping".                                  104F:60       : RTS      : Return to key input again.                                     	    ---end


		Machine Code for the Oric Atmos (Part 14)   Peter N. Bragg                      		-------------------------------                                   

So what do you think of it so far ?                                             ----------------------------------- Eric and Ernie fans have an answer to that. But seriously, the aim of this series is to show how it is possible to get more out of our favourite machine. However over the past year or so, the scene has   changed quite a lot and the Oric which was supposed to have "died" many years   ago, is still a very lively and rather noisy "corpse". Much of the blame for    this situation can be laid at the doors of the OUM and CEO magazine editors.    The result has been an influx of new readers, one or two of whom might even     read a little of this and thereby treble my readership figures.                                                                                                 A series of this type that doesn't cater for a constantly changing readership,  is about as useful as a chocolate teapot. With this in mind, it is worth        pausing occasionally, for a brief overview of what we are doing and why.                                                                                        This series is not intended to be a complete and detailed course on machine     code programming. That is something which has already been well covered many    times before in other publications. Instead, I have tried to break the series   into a number of seperate topics, which have been roughly linked by an initial  "Story so far" heading. The idea behind this is to enable the reader to gain    something, even if they have only read a couple of the articles.                                                                                                However, at this stage there may be some new readers who are baffled by some of the references to items such as the "Accumulator" or the "Flags". Obviously it  would be a bit pointless to go back and repeat everything again. It is probably better to list the main subjects covered so far, together with the OUM issue    number so that if you do lack a particular issue that might help, you can       contact our illustrious editor, Dave, who can no doubt be bribed to provide you with the neccesary copy. Below, you will see a brief list the articles so far -                                                                                 

Part       Subject                                                        Issue ----       -------                                                        -----  1) Machine code programming and Oric described.                            (43) 2) "Hexloader" for reading and writing programs (updated later in Part 7). (44) 3) Instructions & Registers - The Accumulator and the Program Counter.     (45) 4) Decisions and how the Oric makes them - "Flags" and Status Register.    (46) 5) A small Instruction Set described.                                      (47) 6) A simple "Screen Fill" demo routine using small Instruction Set.        (48) 7) Simple programming aids and updated "Hexloader" program (see above).    (49) 8) Data/Parameter Blocks and demo "Copy" routine.                          (50) 9) More on the demo "Copy" routine.                                        (51)10) Jump instructions and updated small Instruction Set.                    (52)11) Keyboard input, using Oric's operating system.                          (53)12) Demo routine for "Keyboard Control".                                    (54)
13) More on "Keyboard control" routine.                                     (55)                                                                                

To keep things as simple as possible, all the articles so far, have used the    minimum number of instructions possible in the hope that it will enable the     reader to get a better understanding of how machine code programming works,     without having to cope with dozens of different instructions at the start.      All the above demo routines used a simplified Instruction Set of just four      types, a total of 16 instructions in all. The aim is to eventually cover the    whole 6502 Instruction Set in easy stages.                                                                                                                      Many people think that programming, particularly in machine code, is very       difficult and some are also terrified of "crashing" the computer, so let's have brief look at these points in this overview

Carry on Crashing                                                               ----------------- First, let's look at the dreaded "crash". A crash does no     harm to the computer at all, so dont worry about it. Anyway, it is all part of  the programming process. Very few programs run first time and any that do, are  often looked at with some suspicion, until they have been thoroughly tested.    What usually happens when the Oric "crashes" is this. Although you may not be   aware of it, the Oric's Operating System also does a number of "housekeeping"   jobs in the background as well as running your programs. These include keeping  the display going and checking the keyboard to see if any keys are being        pressed. If a programming error interferes with this process, the operating     system may stop making it's regular check on the keyboard, so any key you press will then be ignored and you will need to RESET or even switch off, to regain   control of the keyboard. You may also see some rubbish on the screen or other   effects, depending on the type of program error. Providing your program has     been saved on tape or disk, this is no problem, just reload and re-check the    program again. Note, you should always save new programs before testing them.                                                                                   

Easy Programming                                                                ---------------- Programming may seem difficult at first. The secret is to      start small and be prepared to experiment. You will learn far quicker and       easier that way and hopefully it should be more interesting. Long routines can  be hard to produce and debug. As I like to enjoy my computing, I write my own   programs as a series of small routines and build up longer programs from them.  A small routine is easier to write and get working. You can then link up the    successful routines to produce large programs, confident in the knowledge that  at least the individual parts work, so it should be fairly easy to get the      whole thing operating correctly.                                                                                                                                However, if you have already written a longish program that will not work,      break it up into small pieces and check each piece seperately, to make sure     that it does what it is supposed to do and nothing else. Build up from there by putting several pieces together and testing again. Eventually you will find the cause of the problem. However, it really is best to do your programming in      small bits, checking that each part works as you go along.                                                                                                      

Why bother to write software ?                                                  ------------------------------ This is a question that always surprises me.     There is a large software selection available for the Oric, but even the most   popular computers do not have a complete range, sufficent to satisfy everyone.  The software available for any microcomputer is only a starter. If you dont     like the way it works, you can change it, by writing your own. That is the main advantage of a computer. It is very different when you buy a new car, washing   machine or camera for example, there you are limited, to what is available in   your price range and you are stuck with it, whether you like it, or not.        If you have a computer, you can add a lot to it, using little more than pencil  and paper. For example, if you have another interest/hobby, it's a sure thing   that there is some application in it where your computer could be very useful.  That is just one example, the only real limits are your own imagination.                                                                                        While we are having this general overview, lets explode a couple of myths       apparently widely held by many self aclaimed "experts". One favourite myth is   that computers do not use machine code any more. Frankly this is rubbish.       Strictly speaking machine code is hex code which is the only language that is   common to all microcomputers, unless you are into binary or have eight legs !!                                                                                  Another old favourite is "machine code is limited in capability compared with   high level languages". Wrong, it is really the other way round. A good well     written high level language can be nearly as effective as machine code.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Essentially it is a trade-off between ease of use against the inevitable        restrictions in speed and operation. You pay your money and take your choice.   Putting it very simply, any language is made up of prefabricated chunks of      machine code program. These "chunks" are given labels by which they can be      called up and used. The labels PRINT or ZAP are examples used in Oric Basic.    The label is used by Oric Basic to call up the appropriate machine code routine,when asked to do so, either by your Basic program or command line. The same     principle applies to all languages, however high level they may be.                                                                                             

Machine Code ?                                                                  -------------- Although machine code is binary, hex code is exactly the same,   thing, but much easier to use. It is a numbering system that uses a base of 16  instead of the more familiar decimal base 10. To keep the base set as single    digits, hex code uses the first 6 letters of the alphabet (A to F) instead of   the numbers 11 to 15. It may seem a little strange at first, but then so was    the decimal money system, when it was first brought in. At least we dont have   to use hex code to calculate. If you are working out screen graphics, it can    make life a lot easier, because it is easy to convert to binary if required.    Hex code also makes memory addressing far easier as we will see later on in the series.                                                                                                                                                         You can use an assembler for writing your program into the Oric. I write my own programs in plain English and assembly language. Being lazy, I then enter the   program as hex code and use a dis-assembler to list out and check that I have   entered it all correctly.                                                                                                                                       

The Great Reset Button Basher                                                   ----------------------------- How do you write your programs ? So far there     seems to be two schools of thought on this one. One is the keen hacker armed    with an exercise book and a biro. Six months later, he is up to the armpits in  biro ink and adrift in a sea of scribbled alterations and bugs. His is a rare   breed, but I have known them.                                                                                                                                   The "techie" type on the other hand puts everything on the computer straight    away, which is not too bad for fairly short and simple programs, but can result in alphanumeric indigestion, when larger projects are attempted. He needs to be very efficent with REM information statements and text formatting.                                                                                              I find it easier to use a combination of techniques. I use a wordprocessor to   write notes and a disassembler to print listings. However, these do have        limitations in display and printout. It is true to say that a picture is worth  a thousand words and a small pencil sketch is often useful. For a lot of my     designing, planning and programming over the years, I have used a notepad and a pencil, specifically one of those 8" x 5" reporter pads and an 05mm "F" lead    pencil plus a "Pentel" pencil shaped eraser, ideal for making small, neat       alterations to listings. The note pad fits into an ordinary small writing case  which also holds a set of "crib cards" which contain essential information,     such as instruction sets and computer system addresses. This enables me to      write programs anywhere. I never use pens or biro for this job, they are        difficult to erase, when you want to make changes and modifications. No design  or program is ever final. There is always some modification or improvement that comes to mind, often while still working on the current project. Computer       programming should be fun, if it isn't, you may be taking it too seriously.                                                                                     

Political Manifesto                                                             ------------------- How about fitting an Oric and electronic camera to the      front door together with a heavy calibre machine gun and software guaranteed to pick out any political lapel badge !! .......Next month, where to put your "X".                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             


		Machine Code for the Oric Atmos (Part 15)   Peter N. Bragg                      		-------------------------------                                     

The Story so far                                                                ---------------- We have looked at the basic requirements for machine code      programming on the Oric and now have a small table (subset) of sixteen useful   instructions. We have also had a look at how the keyboard can be used to        control operations. The last issue gave a brief summary of how we covered the   above items for the benefit of those who might be missing some issues.                                                                                          

The "In's and Out's" of Oric                                                    ---------------------------- Two items are essential to any microcomputer.      These are, a display, in order to see what the little silicon menace is up to   and a keyboard to keep it under control. Of course there are other input and    output devices such as printers and joysticks for example, but these are        usually added to the system later, as and when we need them.                                                                                                    This means that the first essential of any programming language (or system)     is that it must provide an easy way to write to the display screen and also     read the keyboard, when required. Of course, this applies to machine code and   assembly programming too. However, we dont have to bother to write anything     to do these jobs for us. The Oric, like most computers, already has the         required routines installed in its Operating System ROM. It could not           function very well without them. These routines are also available to us and    can be easily called up for use in our own programs.                                                                                                            The two essential calls are "GTORKB" which reads the keyboard and "VDU" which   writes to the screen display. We have already used "GTORKB" to read the         keyboard in parts 11 to 13 of the series. Now we will look at how the "VDU"     call can be used to update and write to the display screen.                                                                                                     

The Display                                                                     ----------- First of all, I should mention that earlier in the series we used   a routine that wrote items to the text screen. As a simple demonstration,       this could fill the display screen with crosses or any other display item.      It operated by selecting screen addresses (in the #BBA8 - #BFDF area) and       poking display code into them. This is OK for blanking the screen and           producing simple backgrounds, but it obviously has its limitations if we want   to display anything else, such as input, on the screen.                                                                                                         To do that, we need something to handle the screen addressing for us and deal   with any display codes which affect the display format (ie. Line Feed and       Carriage Return). It needs to operate automatically particularly when we        reach the end of the last line at the bottom of the display.                                                                                                    Fortunately, the Operating System has the same requirements in this respect     and so it is not surprising that it contains just the routine, that we need,    which is named "VDU". All we have to do is to load the required display code    and call up the "VDU" routine using the instruction JSR F77C. This will then    display the code at the current cursor position and then deal with any other    effects that the displayed code might produce.                                                                                                                  So now there are two methods of writing to the screen display. You can just     POKE them straight into a screen address or you can use the "VDU" routine.      If you experiment with these two methods, you will find that some codes,        particularly those in the 00 to 1F range, produce different results, depending  on whether you use the "VDU" call, or POKE them directly into the screen.       Essentially, the main advantage of the "VDU" call is that it enables you to     feed input straight into the cursor position without having to set an address.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  The routine below provides a simple illustration of how the "VDU" call          operates. You can put it into the Oric, using an assembler or the "Hexloader"   (from Part 7) if you wish. To use it, just CALL#1010 and then tap the space     bar a few times. One by one, the three codes in locations 1001 to 1003 will be  displayed at the cursor. Change the middle code in 1002 for something else,     like 0A or 0B for example and you will see that "VDU" handles these             differently.                                                                                                                                                    

A "VDU" Display Demo                                                            -------------------- Now we will look at the routine and see how it works.      Essentially the routine is made up from just four different instructions.                                                                                                                          Let's look at the "Wait for a Keypress" instruction pair first. There are four of                                       them and their sole purpose is to slow the operation down, so that you can see                                         what is happening at each stage, instead of having it all happen at once. We have                                        already looked at the "GTORKB/BMI" keyboard operation in detail. This time we                                      are not bothering to save or use the input from the keyboard. The pair of                                                  instructions simply provide a "Press any Key to Procede" type of control. This                                           applies to all of the "Wait for a KeyPress" instruction pairs in the routine                                      at 1010, 101B, 1026 and 1031.                                                                                                                                   

What the "LDX" ?                                                                ---------------- The second item of notein this routine is the "LDX" instruction,                                       which is used to load the display code for the "VDU" call. This is something new and obviously a little bit of explanation is called for. You may recall that at the beginning of the series, I mentioned that the 6502 uses six storage units called Registers. These are used to store and process data. So far, we have dealt with three of these, the Program Counter, the Status Register and the Accumulator. We have since been making use of them in our programs. These three Registers ensure that instructions are executed in the right order, correct decisions are made and data is processed as required. The remaining three Registers are essentially used to make programming more versatile and efficent as you will see when we look at them in more detail. In the meantime, it is sufficent to say at this point, that Register X is one of those three remaining                                      Registers and that to a limited extent it can be loaded and used in the same way as the Accumulator Register, although it's contents are quite separate from those of the Accumulatorn the routine presented here, Register "X" is being used in exactly the same   way as the Accumulator would be. It can hold a maximum of one byte, which as    we already have found, can be any value from 00 to FF.                                                                                                          Register X is loaded with the required code for display, which is fetched by    "LDX" instructions from Parameter Block 1001, before making the calls to the    Operating System "VDU" using JSR F77C, to display each item.                                                                                                    As a matter of interest, other computer systems (eg. Apple, BBC etc) do use     the Accumulator for the display code, but otherwise the operation is very       similar to Oric's "VDU" call.                                                                                                                                   So to sum up, this routine fetches the three ASCII codes and displays them      one at a time, waiting between each one, so that you can see what effects       each code produces. For a start, we are using just "A", "B" and "C"             (41 to 43), but of course there is the whole range between 00 to FF, many of    which dont just display a character, but produce other effects as well.                                                                                         I should of course mention that all of this so far applies to the TEXT Mode     display. The HIRES Mode operates in a different way. It is in fact not very     difficult to write programs for the HIRES display, but the TEXT Mode probably   gives us more options at this point in time.                                                                                                                    The initial aim of this series has been to provide the smallest possible set    of instructions and Operating System calls, as a kind of "starter pack".        The idea was to give anyone who would like to try their hand at assembly        (machine code) programming, a simple basic "kit of bits" which could be used    to experiment and build up from. We will of course be covering a lot more of    the 6502 instructions, but now it is possible to produce reasonable machine     code programs using the instructions and system calls, we have covered so far.  If you havent already done so, why not give it a try for yourself. For a        start, take another look at the demo routine right here in this article.        OK, so it does work, but is it really good enough ?                                                                                                             The only problem now is that the result is not very useful, because the         routine only displays three codes. We really need a minimum of six codes to     do the job properly, as some display items need several codes to show their     full effect. Of course, I could extend the routine simply by adding on more     "Display Item" operations, just like the first three. This would work of        course, but it's a very poor solution. The routine shown here is really not     very well thought out. There must be a better way, using the instructions       that we have covered so far. What we really need is something that can          display half a dozen display codes in exactly the same way as this routine,     but a bit more compact. Maybe I should look at Part 10 of the series to see     if that is any help.                                                                                                                                            With that thought, I will leave you..Next time, more ways to banjax the Oric

Oric - Demo        Display Operation         8 Apr 92                           -----------        -----------------         --------                           [ CALL#1010 ]------------[ DISPLAY THREE ITEMS ]-----

                                                                                                                                   				---Parameter Block 1001---                              1001:41       : "A"      :  Three ASCII code                                    1002:42       : "B"      :   items for the                                      1003:43       : "C"      :     display.  
                                                                                                                                	   ---start---    ---Pause to check screen---                             1010:20 78 EB : JSR EB78 : Wait for a keypress.                                 1013:10 FB    : BPL 1010 : (read keyboard until then) 
                                                                                                                                                                                                                  				---Display Item 1 ---                                   1015:AE 01 10 : LDX 1001 : Load item 1 into Reg "X"                                                          					and use                                            1018:20 7C F7 : JSR F77C : OS "VDU" to display it.                                                           				     Pause to check screen,                             101B:20 78 EB : JSR EB78 : wait for a keypress.                                 101E:10 FB    : BPL 101B : (read keyboard until then)
                                                                                                                                   				---Display Item 2 ---                                   1020:AE 02 10 : LDX 1002 : Load item 2 into Reg "X"                                                          					and use                                            1023:20 7C F7 : JSR F77C : OS "VDU" to display it.                                                           				     Pause to check screen,                             1026:20 78 EB : JSR EB78 : wait for a keypress.                                 1029:10 FB    : BPL 1026 : (read keyboard until then) 
                                                                                                                                  				---Display Item 3 ---                                   102B:AE 03 10 : LDX 1003 : Load item 3 into Reg "X"                                                          					and use                                            102E:20 7C F7 : JSR F77C : OS "VDU" to display it.                                                           					Pause to check screen,                             1031:20 78 EB : JSR EB78 : wait for a keypress.                                 1034:10 FB    : BPL 1031 : (read keyboard until then)                                                                                                                                   				---Finish---  

1036:60       : RTS      :  Exit back to Basic.                                           	    ---end--- 

		Machine Code for the Oric Atmos (Part 16)   Peter N. Bragg                      		-------------------------------  

The Story so far                                                                ---------------- We have looked at the basic requirements for machine code      programming on the Oric and have used a small table (Subset) of machine code    instructions. In addition, we have looked at two Operating System calls that    enable us to read the keyboard and write to the display screen. Part 14 of      the series, gave a brief summary of how these subjects have been covered so     far, for the benefit of those who might be missing some issues.                                                                                                 

Programming Kit                                                                 --------------- We now have a few more instructions to add to our collection    so we might as well use them to make up a simple programming kit. On the next   page you will find an updated Instruction Subset, plus an additional columm     to help you to locate information on specific items. Also included are the      two Operating System calls to read the keyboard and write to the display,       which complete the small machine code programming kit.                                                                                                          The set of five types of instruction and two system calls should be sufficent   to enable you to try some simple machine code programming of your own, which    you can control by using the keyboard and screen display system calls.                                                                                          Restricting size of the instruction set used, to keep it as small as possible   at first, should make it easier to understand. Of course there are more         instructions in the complete set, which you will find very useful, when we      get to them, later on. Hopefully, by then the instruction subset shown here,    will have given you sufficent experience to make the additional instructions    easier to understand as well. In the meantime, the set covered so far, should   be enough to deal with most aspects of Oric programming.                                                                                                        

It Went That-a-Way !                                                            -------------------- It is one thing to read about machine code, but really     the best way to get to understand it, is to have a go. Once you start to        experiment and also make some mistakes, things will become a lot clearer. In    the early days, when I started, I found that making a few rough notes as I      went along, also helped me to remember how I managed to get some of the         results, so that I could use them later in more ambitous projects. For a        start, I did small things, such as displaying simple graphics and moving them   around the screen. Easy enough to move them up and down, left and right, but    then try it diagonally and without altering the background ! Remember, on the   Oric, you can write directly into the screen addresses, or you can use the      system call "VDU".                                                                                                                                              So far, we have concentrated on the the TEXT mode display which gives the       largest number of display options for the simplest possible operation. There    are 256 display codes (00 to FF), all of which should be listed in your         manual together with their effects. Generally speaking, codes 20 to 7F cover    the alphabet, numbers and punctuation characters (alphanumerics to you too !).  The remainder are used for a number of purposes including controlling various   graphic and display effects.                                                                                                                                    You will find that some of these display effects will depend on whether you     use the Operating System "VDU" call or simply poke them straight into screen    addresses in the #BBA8 - #BFDF memory area. In addition, some display effects,  such as colour, make use of several codes together. You can experiment using    both methods to display the codes, if you haven't already done so. To do this   you can use the "Display Operation" routine, published last time, plus any      means to POKE the screen memory (ie. the Hexloader program).                    

                    6502 Instruction Subset                                                         			-----------------------                        Info can be    Accumulator Instructions        Absolute            Immediate     found in                                 					instruct  code      instruct  code                      Load  Accumulator             LDA  AD xx yy        LDA#  A9 xx   -  Part 3            Store Accumulator             STA  8D xx yy                                                                                                                     Add with Carry                ADC  6D xx yy        ADC#  69 xx   -  Part 6         Subtract with Carry           SBC  ED xx yy        SBC#  E9 xx                                                                                                   Compare Accumulator           CMP  CD xx yy        CMP#  C9 xx   - Parts 5 & 6                                                                                   

Register "X" Instructions       Absolute            Immediate                                              					instruct  code       instruct  code                    Load  Register "X"            LDX  AE xx yy        LDA#  A2 xx   -  Part 16        Store Register "X"            STX  8E xx yy                                                                                                                   

Flag Instructions                                               -  Part 4                                   			 	   instruct  code                                         Clear Carry Flag to 0         CLC  18      no operand/data      -  Part 6         Set   Carry Flag to 1         SEC  38      no operand/data                                                                                                    

Conditional Branch Instructions                                 -  Part 5                                                                                             	Condition             instruct code    Flag set by -                        Branch if Carry Flag = 0      BCC  90 xx     No Carry                             Branch if Carry Flag = 1      BCS  B0 xx     Carry                                                                                                                Branch if Zero Flag = 0       BNE  D0 xx     Result Not Zero    -  Part 6         Branch if Zero Flag = 1       BEQ  F0 xx     Result Zero                                                                                                          Branch if Negative Flag = 0   BPL  10 xx     Result Plus                          Branch if Negative Flag = 1   BMI  30 xx     Result Minus                                                                                                       

Jump Instructions                                                                                          				 instruct  code                                         Jump                          JMP  4C xx yy  (address yyxx)   -  Part 10                                                                                        Jump saving return address    JSR  20 xx yy  (address yyxx)   -  Part 10                                                                                        Return/jump from SubRoutine   RTS  60        no operand/data  -  Part 3 & 10                                                                                   

IMMEDIATE (#) instructions supply the required data byte        -  Part 5                              				as the operand "xx".                                                                                                                     

ABSOLUTE instructions on the other hand,                        - Parts 5 & 8            	   don't include the data byte, instead they give                                  	   the address of a memory location which holds it.                                	   The addresses are written in reverse order,                                     	   low part in "xx" and high part in "yy".                -  Part 3                                                                                       

Useful Operating System Calls                                                                                                                                   Call     JSR    Operation        Effect produced is -                                                                                                           

"GTORKB" EB78   20 78 EB 10 FB   Puts Key code into Acumulator. -  Part 11                                                                                       

"VDU"   F77C   20 7C F7         Displays a code from Reg "X".  -  Part 15                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      

NOTE There is a slight difference between the Atmos and the Oric-1.             ----    "GTORKB"  call address is E905 (operation is 20 05 E9 10 FB)                     	  "VDU"    call address is F73F (operation is 20 3F F7)
   I am not able to test these, but I understand that they are correct.                                                                                          

Register "X" Instructions                                                       ------------------------- I would not have included Register "X" instructions   in our collection at this stage, however, the instruction "LDX" is essential    to the Operating System's display routine "VDU" and our display options would   be a bit restricted if we had no access to it.                                                                                                                  So, for the sake of completeness, you will find that three instructions for     Register "X" have been included in our little set. If you compare them with     the equivalents for the Accumulator, you should be able to see that there is    very little difference between Accumulator and Register "X" instructions, so    far. They can be used in the same way and also have the same method of          addressing, as their equivalents for the Accumulator.                                                                                                           Register "X" is the same size as the Accumulator, so it too holds one byte.     At this point, it can be used as an additional storage unit and as an           alternative to the Accumulator. Register "X" can do other things, as well,      but we will have a look at those, a little later on.                                                                                                            Once again, the Register "X" instructions in our subset, give a choice of two   modes of operation. These are IMMEDIATE (#) or ABSOLUTE to load Register "X"    and just ABSOLUTE, for storing Register "X" contents in memory. The ABSOLUTE    instruction address is also written in the same way, as for the Accumulator     instructions. For example, STX 1002 would be written as 8E 02 10 and would      copy the contents of Register "X" into location 1002.                                                                                                           

Are We Winning ?                                                                ---------------- We have used at least one sample of each type of instruction,  listed in the Instruction Subset above, although not in fact every              instruction in each group. For example, we covered the Branch instruction BNE,  but not the other five, in that group. In fact they all operate in the same     way. They simply give you a choice of the tests that you can make. When you     test an item, you start with a Compare instruction (CMP) which sets the Flags   in the Status Register. The Branch instruction you use to follow that,          decides what you are testing for. For example, to test if an item is too        large, use BPL. To test if it is too small, use BMI. I hope to cover more of    these and the rest of the 6502 Instruction Set in due course.                                                                                                   Taking it overall, we have covered about one third of the "6502" machine code   instructions in the series so far in quite a bit of detail. In fact this is a   lot better than it sounds, because if you have managed to understand what has   been written so far, it is very unlikely that you will have much difficulty     with the rest of the Instruction Set. All these instructions can be used in     other machines, which have a 6502 microprocessor. The system calls to read      the keyboard and write to the display on those machines will be very similar    in operation to the two (GTORKB and VDU) used by the Oric. In addition, most    of the instructions covered so far, also appear in the instruction sets for     other microprocessors, I have used. Of course the opcodes and many labels are   different, but there seem to be a lot of things in common, which makes life     much easier for the programmer.                                                                                                                                 Next time.....                                                                     Getting Football TV contracts on an Amstrad...from our ITV correspondent